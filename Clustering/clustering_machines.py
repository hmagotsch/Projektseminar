# -*- coding: utf-8 -*-
"""Clustering von Maschinen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12dfYd8SuixlS8ryeCRge1MDVjDATyvsf

Unsupported Clustering of Machines
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import plotly.graph_objs as go

# upload dataframe which includes name of the machine, Mean_speed, Total_Jobs, Net and Gross
path="/content/drive/MyDrive/new_data.csv"
df=pd.read_csv(path,sep=",")
df.head(20)
df.info()

df

#exclude all machines with only 1 job or less
df= df[df['Total_Jobs']>1]

df.info()

#choose the features
features = df[['Machine','Mean_Speed','Total_Jobs','Net','Gross']]

features.head()

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features[['Mean_Speed', 'Total_Jobs','Net','Gross']])

#set the number of clusters
num_clusters = 5

# Fit KMeans model
kmeans = KMeans(n_clusters=num_clusters)
features['cluster'] = kmeans.fit_predict(scaled_features)

# Print the resulting clusters
print("Clusters:")
print(features[['Machine', 'cluster']])

# Visualize the results with mathplot lib
plt.scatter(features['Mean_Speed'], features['Total_Jobs'], c=features['cluster'], cmap='viridis')
plt.title('KMeans Clustering of Machine')
plt.xlabel('Mean Speed')
plt.ylabel('Number of Jobs')

#remove # for adding annotations
#for index, row in features.iterrows():
#  plt.annotate(row['Machine'], (row['Mean_Speed'], row['Total_Jobs']),textcoords='offset points', xytext=(0,5),ha='center')

plt.show()

#visualize the results with plotly

custom_colors = ['#093D79', '#4A688F','#8BBCE4','#9D9E9E','#E40613']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter(
            x=cluster_data['Mean_Speed'],
            y=cluster_data['Total_Jobs'],
            mode='markers',
            #marker=dict(color=cluster_value),
            marker=dict(color=color, size=10),
            text=cluster_data['Machine'],
            name=f'Cluster {cluster_value}'

    ))



fig.update_layout(
    title='KMeans Clustering of Machines',
    xaxis=dict(title='Mean Speed'),
    yaxis=dict(title='Number of Jobs'),
    showlegend=True,

)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

#visualize the results using a 3D graphic
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

# Scatter plot with three features: Speed, Net, and Gross
scatter = ax.scatter(features['Mean_Speed'], features['Total_Jobs'], features['Gross'], c=features['cluster'], cmap='viridis')


ax.set_title('KMeans Clustering of Machines')
ax.set_xlabel('Mean Speed')
ax.set_ylabel('Jobs')
ax.set_zlabel('Gross')



plt.show()

#visualize the results with plotly in 3D

#custom_colors = ['#093D79', '#4A688F', '#8BBCE4', '#9D9E9E', '#FFFFFF', '#E40613', '#FA6F7C', '#E4A7AA', '#F39200', '#E1BC89']
custom_colors= ['#093D79', '#4A688F','#8BBCE4','#9D9E9E','#E40613']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter3d(
        x=cluster_data['Mean_Speed'],
        y=cluster_data['Total_Jobs'],
        z=cluster_data['Gross'],
        mode='markers',
        marker=dict(color=color, size=10),
        text=cluster_data['Machine'],
        name=f'Cluster {cluster_value}'
      ))

fig.update_layout(
    title='KMeans Clustering of Job',
    scene=dict(
        xaxis=dict(title='Mean Speed'),
        yaxis=dict(title='Jobs'),
        zaxis=dict(title='Gross')
    ),
    showlegend=True,

)