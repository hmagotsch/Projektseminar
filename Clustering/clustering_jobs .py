# -*- coding: utf-8 -*-
"""Clustering _Jobs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FcM_PzDDG9GmYeTi16TgqzT56qfG8uzV

Unsupported Clustering of Jobs in 3-5 groups
Features for Clustering: Mean Speed, Net, Job Duration and Gross
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from sklearn.preprocessing import StandardScaler

#load the data
pathB="/content/drive/MyDrive/11MachineB_with_Job (2).csv"
pathA="/content/drive/MyDrive/11MachineA_with_Job (3).csv"
pathC="/content/drive/MyDrive/11MachineC_with_Job (3).csv"
pathD="/content/drive/MyDrive/11MachineD_with_Job (2).csv"
dfA=pd.read_csv(pathA,sep=";")
dfB=pd.read_csv(pathB,sep=";")
dfC=pd.read_csv(pathC,sep=";")
dfD=pd.read_csv(pathD,sep=";")
dfD.head(20)
dfD.info()

#calculating Net per Job
dfD['NetproJob']=(dfD.groupby('Job')['Net'].transform('max')-dfD.groupby('Job')['Net'].transform('min'))

#calculating Gross per Job
dfD['GrossproJob']=(dfD.groupby('Job')['Gross'].transform('max')-dfD.groupby('Job')['Gross'].transform('min'))

#choose the features
features = dfD.groupby('Job').agg({'Speed': 'mean', 'NetproJob': 'first'}).reset_index()

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features[['Speed', 'NetproJob']])

#set the number of clusters
num_clusters = 5

# Fit KMeans model
kmeans = KMeans(n_clusters=num_clusters)
features['cluster'] = kmeans.fit_predict(scaled_features)

#save features to csv (only important for the use in the dashboard)
features.to_csv('features_data.csv', index=False)

# Print the resulting clusters
print("Clusters:")
print(features[['Job', 'cluster']])

print(features[['Job','NetproJob']])

# Visualize the results with matplotlib
plt.scatter(features['Speed'], features['NetproJob'], c=features['cluster'], cmap='viridis')
plt.title('KMeans Clustering of Job')
plt.xlabel('Mean Speed')
plt.ylabel('Net')
for i, txt in enumerate(features['Job']):
    plt.annotate(txt, (features['Speed'][i], features['NetproJob'][i]), textcoords="offset points", xytext=(0,5), ha='center')

plt.show()



#visualize the results with plotly with annotations

custom_colors = ['#093D79', '#4A688F','#8BBCE4','#9D9E9E','#E40613']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter(
            x=cluster_data['Speed'],
            y=cluster_data['NetproJob'],
            mode='markers',
            #marker=dict(color=cluster_value),
            marker=dict(color=color, size=10),
            text=cluster_data['Job'],
            name=f'Cluster {cluster_value}'

    ))

for index, row in features.iterrows():
    fig.add_annotation(
        x=row['Speed'],
        y=row['NetproJob'],
        text=str(int(row['Job'])),  # Convert to integer and then to string
        showarrow=False,
        font=dict(color='black', size=12),  # Increase font size to 12
        xshift=5,  # Shift annotation to the right
        yshift=5,  # Shift annotation upwards
        xanchor='left'
    )


fig.update_layout(
    title='KMeans Clustering of Job',
    xaxis=dict(title='Mean Speed'),
    yaxis=dict(title='Net pro Job'),
    showlegend=True,

)

#visualize the results with plotly without annotations

custom_colors = ['#093D79', '#4A688F','#8BBCE4','#9D9E9E','#E40613']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter(
            x=cluster_data['Speed'],
            y=cluster_data['NetproJob'],
            mode='markers',
            #marker=dict(color=cluster_value),
            marker=dict(color=color, size=10),
            text=cluster_data['Job'],
            name=f'Cluster {cluster_value}'

    ))

fig.update_layout(
    title='KMeans Clustering of Job',
    xaxis=dict(title='Mean Speed'),
    yaxis=dict(title='Net pro Job'),
    showlegend=True,

)

"""Ansatz mit mean Speed, Net & Job Dauer + Gross"""

#convert CheckIn and CheckOut to datetime
date_format = "%Y-%m-%d %H:%M:%S%z"
dfD['CheckIn'] = dfD['CheckIn'].str.replace('\.\d+', '', regex=True)
dfD['CheckOut'] = dfD['CheckOut'].str.replace('\.\d+', '', regex=True)
dfD['CheckIn'] = pd.to_datetime(dfD['CheckIn'], format=date_format)
dfD['CheckOut'] = pd.to_datetime(dfD['CheckOut'], format=date_format)

#convert CheckIn and CheckOut to datetime (old code snipped stoped workingl, probabbly due to changes in pandas)
#dfD['CheckIn'] = pd.to_datetime(dfD['CheckIn'], format="%Y-%m-%d %H:%M:%S.%f%z")
#dfD['CheckOut'] = pd.to_datetime(dfD['CheckOut'],format="%Y-%m-%d %H:%M:%S.%f%z")

#calculate the duration of each job
dfD['Duration']=(dfD.groupby('Job')['CheckOut'].transform('max')-dfD.groupby('Job')['CheckIn'].transform('min')).dt.total_seconds()
dfD['Duration']

dfD.head()

#only relevant for the dashboard
dfD.to_csv('Machine_D_Duration.csv', index=False)

features = dfD.groupby('Job').agg({'Speed': 'mean', 'NetproJob': 'first','Duration':'first','GrossproJob':'first'}).reset_index()

print(features[['Job','GrossproJob']])

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features[['Speed', 'NetproJob','Duration','GrossproJob']])

num_clusters = 3

# Fit KMeans model
kmeans = KMeans(n_clusters=num_clusters)
features['cluster'] = kmeans.fit_predict(scaled_features)

# Print the resulting clusters
print("Clusters:")
print(features[['Job', 'cluster']])

# Visualize the results with mathplotlib
plt.scatter(features['Speed'], features['NetproJob'], c=features['cluster'], cmap='viridis')
plt.title('KMeans Clustering of Job (D)')
plt.xlabel('Mean Speed')
plt.ylabel('Net')
for i, txt in enumerate(features['Job']):

    plt.annotate(txt, (features['Speed'][i], features['NetproJob'][i]), textcoords="offset points", xytext=(0,5), ha='center')


plt.show()

# Visualize the results with plotly

custom_colors = ['#093D79', '#4A688F','#8BBCE4','#9D9E9E','#E40613']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter(
            x=cluster_data['Speed'],
            y=cluster_data['NetproJob'],
            mode='markers',
            #marker=dict(color=cluster_value),
            marker=dict(color=color, size=10),
            text=cluster_data['Job'],
            name=f'Cluster {cluster_value}'

    ))

# Add text annotations for job names
for index, row in features.iterrows():
    fig.add_annotation(
        x=row['Speed'],
        y=row['NetproJob'],
        text=str(int(row['Job'])),  # Convert to integer and then to string
        showarrow=False,
        font=dict(color='black', size=12),  # Increase font size to 12
        xshift=5,  # Shift annotation to the right
        yshift=5,  # Shift annotation upwards
        xanchor='left'
    )

fig.update_layout(
    title='KMeans Clustering of Job',
    xaxis=dict(title='Mean Speed'),
    yaxis=dict(title='Net pro Job'),
    showlegend=True,

)

#visualize the results using a 3D graphic with mathplotlib
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

# Scatter plot with three features: Speed, Net, and Gross
scatter = ax.scatter(features['Speed'], features['NetproJob'], features['GrossproJob'], c=features['cluster'], cmap='viridis')

ax.set_title('KMeans Clustering of Job')
ax.set_xlabel('Mean Speed')
ax.set_ylabel('Net')
ax.set_zlabel('Gross')

# Add annotations
for i, txt in enumerate(features['Job']):
    ax.text(features['Speed'][i], features['NetproJob'][i], features['GrossproJob'][i]+5,txt, ha='center')


plt.show()

#visualize the results with plotly in 3D

custom_colors = ['#093D79', '#4A688F', '#8BBCE4', '#9D9E9E', '#FFFFFF', '#E40613', '#FA6F7C', '#E4A7AA', '#F39200', '#E1BC89']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter3d(
        x=cluster_data['Speed'],
        y=cluster_data['NetproJob'],
        z=cluster_data['GrossproJob'],
        mode='markers',
        marker=dict(color=color, size=10),
        text=cluster_data['Job'],
        name=f'Cluster {cluster_value}'
      ))

fig.update_layout(
    title='KMeans Clustering of Job',
    scene=dict(
        xaxis=dict(title='Mean Speed'),
        yaxis=dict(title='Net'),
        zaxis=dict(title='Gross')
    ),
    showlegend=True,

)

"""Further approaches with more algorithms

Hierarchical Clustering
"""

from sklearn.cluster import AgglomerativeClustering

#use hierarchical clustering
hierarchical = AgglomerativeClustering(n_clusters=3)
 # Fit and predict clusters
features['cluster'] = hierarchical.fit_predict(scaled_features)


# Visualize the results
plt.scatter(features['Speed'], features['NetproJob'], c=features['cluster'], cmap='viridis')
plt.title('Hierarchical Clustering of Job (D)')
plt.xlabel('Mean Speed')
plt.ylabel('Net')

for i, txt in enumerate(features['Job']):
    plt.annotate(txt, (features['Speed'][i], features['NetproJob'][i]), textcoords="offset points", xytext=(0,5), ha='center')

plt.show()

# Visualize the results with plotly

custom_colors = ['#093D79', '#4A688F','#8BBCE4','#9D9E9E','#E40613']

fig = go.Figure()

for cluster_value, color in zip(features['cluster'].unique(), custom_colors):
    cluster_data = features[features['cluster'] == cluster_value]
    fig.add_trace(go.Scatter(
            x=cluster_data['Speed'],
            y=cluster_data['NetproJob'],
            mode='markers',
            #marker=dict(color=cluster_value),
            marker=dict(color=color, size=10),
            text=cluster_data['Job'],
            name=f'Cluster {cluster_value}'

    ))

# Add text annotations for job names
for index, row in features.iterrows():
    fig.add_annotation(
        x=row['Speed'],
        y=row['NetproJob'],
        text=str(int(row['Job'])),  # Convert to integer and then to string
        showarrow=False,
        font=dict(color='black', size=12),  # Increase font size to 12
        xshift=5,  # Shift annotation to the right
        yshift=5,  # Shift annotation upwards
        xanchor='left'
    )

fig.update_layout(
    title='Hierarchical Clustering of Job',
    xaxis=dict(title='Mean Speed'),
    yaxis=dict(title='Net pro Job'),
    showlegend=True,

)

"""DBScan"""

from sklearn.cluster import DBSCAN

# Create DBSCAN model
dbscan = DBSCAN(eps=0.5, min_samples=1)

# Fit and predict clusters
features['cluster'] = dbscan.fit_predict(scaled_features)

# Print the resulting clusters
print("Clusters:")
print(features[['Job', 'cluster']])

# Visualize the results
plt.scatter(features['Speed'], features['NetproJob'], c=features['cluster'], cmap='viridis')
plt.title('DBSCAN Clustering of Job (D)')
plt.xlabel('Mean Speed')
plt.ylabel('Net')

for i, txt in enumerate(features['Job']):
    plt.annotate(txt, (features['Speed'][i], features['NetproJob'][i]), textcoords="offset points", xytext=(0,5), ha='center')

plt.show()

import plotly.graph_objects as go

# Define custom colors for clusters
custom_colors = {
    0:'#000000',
    1:'#093D79',
    2: '#4A688F',
    3:'#8BBCE4',
    4:'#9D9E9E',
    5:'#FFFFFF',
    6:'#E40613',
    7: '#FA6F7C',
    8: '#B9869A',
    9: '#E4A7AA',
    10: '#FF6347',
    11: '#F39200',
    12: '#FFD700',
    13: '#E1BC89'
}


# Create a list to store the traces
traces = []

# Iterate over each cluster and create a scatter trace
for cluster_label, color in custom_colors.items():
    cluster_data = features[features['cluster'] == cluster_label]
    trace = go.Scatter(
        x=cluster_data['Speed'],
        y=cluster_data['NetproJob'],
        mode='markers',
        marker=dict(color=color,size=10),
        name=f'Cluster {cluster_label}',
        text=cluster_data['Job'],
        # Add annotations
        hovertemplate = '<b>%{text}</b><br>Speed: %{x}<br>Net: %{y}<extra></extra>'

    )
    traces.append(trace)



# Create the layout
layout = go.Layout(
    title='DBSCAN Clustering of Job (D)',
    xaxis=dict(title='Mean Speed'),
    yaxis=dict(title='Net')
)

# Create the figure and add traces and layout
fig = go.Figure(data=traces, layout=layout)

#Add text annotations for job names
for index, row in features.iterrows():
    fig.add_annotation(
        x=row['Speed'],
        y=row['NetproJob'],
        text=str(int(row['Job'])),  # Convert to integer and then to string
        showarrow=False,
        font=dict(color='black', size=12),  # Increase font size to 12
        xshift=5,  # Shift annotation to the right
        yshift=5,  # Shift annotation upwards
        xanchor='left'
    )
# Show plot
fig.show()