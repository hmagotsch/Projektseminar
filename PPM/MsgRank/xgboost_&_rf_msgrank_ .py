# -*- coding: utf-8 -*-
"""XGBoost_&_RF_MsgRank .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10X5z8n4GkVpVgltMz9qclaWi7vJOvvVM
"""

import tensorflow as tf
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import imblearn
import xgboost as xgb
from sklearn.model_selection import train_test_split
from xgboost import plot_importance, plot_tree
from sklearn.metrics import mean_squared_error, mean_absolute_error
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
import xgboost as xgb
from sklearn.metrics import mean_squared_error
color_pal = sns.color_palette()
from sklearn.metrics import accuracy_score, classification_report

#path="/content/drive/MyDrive/MachineB_with_Job.csv"
path='/content/drive/MyDrive/finale DatenProjekt/MachineB_with_Job_final.csv'
df=pd.read_csv(path,sep=";")
df.head(20)
df.info()

#extract MsgRank and CheckIn
df=df[['MsgRank','CheckIn']]
df.info()

df['CheckIn']

#convert CheckIn to datetime old approach
#df['CheckIn']=pd.to_datetime(df['CheckIn'],format='%Y-%m-%d %H:%M:%S.%f%z')


#df.info()

#convert CheckIn and CheckOut to datetime
date_format = "%Y-%m-%d %H:%M:%S%z"
df['CheckIn'] = df['CheckIn'].str.replace('\.\d+', '', regex=True)
df['CheckIn'] = pd.to_datetime(df['CheckIn'], format=date_format)

#Extracting features from CheckIn
df['CheckInHour'] = df['CheckIn'].dt.hour
df['CheckInMinute'] = df['CheckIn'].dt.minute
df['CheckInSecond'] = df['CheckIn'].dt.second
df['CheckInMicrosecond'] = df['CheckIn'].dt.microsecond
df['CheckInYear'] = df['CheckIn'].dt.year
df['CheckInMonth'] = df['CheckIn'].dt.month
df['CheckInDay'] = df['CheckIn'].dt.day

#drop MsgRank smaller 0
df = df.drop(df.index[df['MsgRank']<0])

#use LabelEncoder
le = LabelEncoder()
df['MsgRank_encoded']= le.fit_transform(df['MsgRank'])

#assign features to X and target to Y
X=df[['CheckInDay', 'CheckInMonth', 'CheckInYear', 'CheckInHour', 'CheckInMinute', 'CheckInSecond', 'CheckInMicrosecond']]
y=df['MsgRank_encoded']

#train test split
X_train,X_test,y_train,y_test=train_test_split(X, y,test_size=0.3,shuffle=False,random_state=80)

"""Create XGBoost Model"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve

model=XGBClassifier()
model.fit(X_train, y_train)#


y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

#inverse the label encoding
y_test_rev= le.inverse_transform(y_test)
y_pred_rev=le.inverse_transform(y_pred)

#print classification report
from sklearn import metrics
from sklearn.metrics import classification_report
accuracy = accuracy_score(y_test, y_pred)

from sklearn.metrics import classification_report

print(classification_report(y_test_rev, y_pred_rev))

#visualize the results
plt.figure(figsize=(10, 6))
plt.plot(y_test.values[:100], label='Actual', marker='o')
plt.plot(y_pred[:100], label='Predicted', marker='o')

plt.title('Actual vs. Predicted Values')
plt.xlabel('Sample Index')
plt.ylabel('Values')
plt.legend()
plt.show()

#calculating how often the prediction was correct with a threshold from 100
threshold= 1.0
absolute_difference =np.abs(y_test.values -y_pred)
correct_predictions = np.sum(absolute_difference <= threshold)

accuracy = correct_predictions / len(y_test)

print(f'Correct Predictions: {correct_predictions}/{len(y_test)}')
print(f'Accuracy: {accuracy * 100:.2f}%')



#Random Forest

from sklearn.ensemble import RandomForestClassifier
rmf = RandomForestClassifier(max_depth=3,random_state=0)
rmf_clf = rmf.fit(X_train,y_train)

test_predictions = rmf.predict(X_test)

test_results = pd.DataFrame(data={'Test Predictions': test_predictions, 'Actuals': y_test})
test_results.sample(10)

print('Accuracy: ',metrics.accuracy_score(y_test, test_predictions))

#inverse the label encoding
y_test_rev= le.inverse_transform(y_test)
test_predictions_rev=le.inverse_transform(test_predictions)

#print classification report
from sklearn.metrics import classification_report

print(classification_report(y_test_rev, test_predictions_rev))
