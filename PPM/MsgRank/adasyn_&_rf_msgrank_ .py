# -*- coding: utf-8 -*-
"""Aktuelle Version von ADASYN & RF MsgRank .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ORk04eCFWUYe8YQ1DY1UR2_A4j5dcHaS
"""

import tensorflow as tf
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import imblearn
import xgboost as xgb
from sklearn.model_selection import train_test_split
from xgboost import plot_importance, plot_tree
from sklearn.metrics import mean_squared_error, mean_absolute_error
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
import xgboost as xgb
from sklearn.metrics import mean_squared_error
color_pal = sns.color_palette()
from sklearn.metrics import accuracy_score, classification_report

path="/content/drive/MyDrive/MachineB_with_Job.csv"
#path="/content/drive/MyDrive/MachineA_with_Job final.csv"
#path="/content/drive/MyDrive/MachineC_with_Job1.csv"
#path="/content/drive/MyDrive/MachineD_with_Job1.csv"
df=pd.read_csv(path,sep=";")
df.head(20)
df.info()

df=df[['MsgRank','CheckIn']]
df.info()

#convert checkIn to datetime|old version
#df['CheckIn']=pd.to_datetime(df['CheckIn'],format='%Y-%m-%d %H:%M:%S.%f')
#df.info()

#convert CheckIn and CheckOut to datetime
date_format = "%Y-%m-%d %H:%M:%S%z"
df['CheckIn'] = df['CheckIn'].str.replace('\.\d+', '', regex=True)
df['CheckIn'] = pd.to_datetime(df['CheckIn'], format=date_format)

#Extracting features from CheckIn
df['CheckInHour'] = df['CheckIn'].dt.hour
df['CheckInMinute'] = df['CheckIn'].dt.minute
df['CheckInSecond'] = df['CheckIn'].dt.second
df['CheckInMicrosecond'] = df['CheckIn'].dt.microsecond
df['CheckInYear'] = df['CheckIn'].dt.year
df['CheckInMonth'] = df['CheckIn'].dt.month
df['CheckInDay'] = df['CheckIn'].dt.day

#drop MsgRank smaller 0
df = df.drop(df.index[df['MsgRank']<0])

#use label encoder
le = LabelEncoder()
df['MsgRank_encoded']= le.fit_transform(df['MsgRank'])

#assign features and target
X=df[['CheckInDay', 'CheckInMonth', 'CheckInYear', 'CheckInHour', 'CheckInMinute', 'CheckInSecond', 'CheckInMicrosecond']]
y=df['MsgRank_encoded']

"""*Sampling*

Adaptive Synthetic Sampling
"""

import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imblearn.over_sampling import ADASYN

#Count occurence MsgRank
label_counts = df['MsgRank'].value_counts()
print("Label Occurrences:")
print(label_counts)

#visualize results
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
sns.countplot(x='MsgRank', data=df)
plt.title('Class Distribution Before ADASYN')

#train test split
X_train,X_test,y_train,y_test=train_test_split(X, y,test_size=0.3,shuffle=False,random_state=80)

"""Create XGBoost Model-Classification"""

# Apply ADASYN to oversample the minority classes
adasyn = ADASYN(random_state=42)
X_train_res, y_train_res = adasyn.fit_resample(X_train, y_train)

#Random Forest

from sklearn.ensemble import RandomForestClassifier
rmf = RandomForestClassifier(max_depth=3,random_state=0)
rmf_clf = rmf.fit(X_train_res,y_train_res)

test_predictions = rmf.predict(X_test)

test_results = pd.DataFrame(data={'Test Predictions': test_predictions, 'Actuals': y_test})
test_results.sample(20)

#inverse label encoder
y_test_rev= le.inverse_transform(y_test)
test_predictions_rev=le.inverse_transform(test_predictions)

#print classification report
from sklearn.metrics import classification_report

print(classification_report(y_test_rev, test_predictions_rev))